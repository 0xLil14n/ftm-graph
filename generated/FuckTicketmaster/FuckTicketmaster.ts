// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class PresaleCreated extends ethereum.Event {
  get params(): PresaleCreated__Params {
    return new PresaleCreated__Params(this);
  }
}

export class PresaleCreated__Params {
  _event: PresaleCreated;

  constructor(event: PresaleCreated) {
    this._event = event;
  }

  get eventId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PresaleStateUpdated extends ethereum.Event {
  get params(): PresaleStateUpdated__Params {
    return new PresaleStateUpdated__Params(this);
  }
}

export class PresaleStateUpdated__Params {
  _event: PresaleStateUpdated;

  constructor(event: PresaleStateUpdated) {
    this._event = event;
  }

  get eventId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get presaleStateBefore(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get presaleStateAfter(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class RoyaltyDisbursed extends ethereum.Event {
  get params(): RoyaltyDisbursed__Params {
    return new RoyaltyDisbursed__Params(this);
  }
}

export class RoyaltyDisbursed__Params {
  _event: RoyaltyDisbursed;

  constructor(event: RoyaltyDisbursed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get profit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TicketCreated extends ethereum.Event {
  get params(): TicketCreated__Params {
    return new TicketCreated__Params(this);
  }
}

export class TicketCreated__Params {
  _event: TicketCreated;

  constructor(event: TicketCreated) {
    this._event = event;
  }

  get ticketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ticketSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get priceInWei(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get eventName(): string {
    return this._event.parameters[4].value.toString();
  }

  get date(): string {
    return this._event.parameters[5].value.toString();
  }

  get venueName(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class TicketResold extends ethereum.Event {
  get params(): TicketResold__Params {
    return new TicketResold__Params(this);
  }
}

export class TicketResold__Params {
  _event: TicketResold;

  constructor(event: TicketResold) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TicketSold extends ethereum.Event {
  get params(): TicketSold__Params {
    return new TicketSold__Params(this);
  }
}

export class TicketSold__Params {
  _event: TicketSold;

  constructor(event: TicketSold) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ticketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenListedForSale extends ethereum.Event {
  get params(): TokenListedForSale__Params {
    return new TokenListedForSale__Params(this);
  }
}

export class TokenListedForSale__Params {
  _event: TokenListedForSale;

  constructor(event: TokenListedForSale) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FuckTicketmaster__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class FuckTicketmaster extends ethereum.SmartContract {
  static bind(address: Address): FuckTicketmaster {
    return new FuckTicketmaster("FuckTicketmaster", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  checkUpkeep(param0: Bytes): FuckTicketmaster__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new FuckTicketmaster__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<FuckTicketmaster__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FuckTicketmaster__checkUpkeepResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  currentTokenId(): BigInt {
    let result = super.call("currentTokenId", "currentTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTokenId",
      "currentTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eventOwners(param0: BigInt): Address {
    let result = super.call("eventOwners", "eventOwners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_eventOwners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eventOwners",
      "eventOwners(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasPresale(id: BigInt): boolean {
    let result = super.call("hasPresale", "hasPresale(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_hasPresale(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasPresale", "hasPresale(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  needsUpkeep(): boolean {
    let result = super.call("needsUpkeep", "needsUpkeep():(bool)", []);

    return result[0].toBoolean();
  }

  try_needsUpkeep(): ethereum.CallResult<boolean> {
    let result = super.tryCall("needsUpkeep", "needsUpkeep():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numTokensForSale(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "numTokensForSale",
      "numTokensForSale(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_numTokensForSale(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numTokensForSale",
      "numTokensForSale(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  presales(param0: BigInt): Address {
    let result = super.call("presales", "presales(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_presales(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("presales", "presales(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supplyLeft(param0: BigInt): BigInt {
    let result = super.call("supplyLeft", "supplyLeft(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_supplyLeft(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supplyLeft", "supplyLeft(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenListPrices(param0: BigInt): BigInt {
    let result = super.call(
      "tokenListPrices",
      "tokenListPrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenListPrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenListPrices",
      "tokenListPrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenResalePrices(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "tokenResalePrices",
      "tokenResalePrices(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenResalePrices(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenResalePrices",
      "tokenResalePrices(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyResoldTokenCall extends ethereum.Call {
  get inputs(): BuyResoldTokenCall__Inputs {
    return new BuyResoldTokenCall__Inputs(this);
  }

  get outputs(): BuyResoldTokenCall__Outputs {
    return new BuyResoldTokenCall__Outputs(this);
  }
}

export class BuyResoldTokenCall__Inputs {
  _call: BuyResoldTokenCall;

  constructor(call: BuyResoldTokenCall) {
    this._call = call;
  }

  get tokenOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ticketId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyResoldTokenCall__Outputs {
  _call: BuyResoldTokenCall;

  constructor(call: BuyResoldTokenCall) {
    this._call = call;
  }
}

export class CreatePresaleCall extends ethereum.Call {
  get inputs(): CreatePresaleCall__Inputs {
    return new CreatePresaleCall__Inputs(this);
  }

  get outputs(): CreatePresaleCall__Outputs {
    return new CreatePresaleCall__Outputs(this);
  }
}

export class CreatePresaleCall__Inputs {
  _call: CreatePresaleCall;

  constructor(call: CreatePresaleCall) {
    this._call = call;
  }

  get ticketSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get priceInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get eventName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get date(): string {
    return this._call.inputValues[3].value.toString();
  }

  get venueName(): string {
    return this._call.inputValues[4].value.toString();
  }

  get startTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreatePresaleCall__Outputs {
  _call: CreatePresaleCall;

  constructor(call: CreatePresaleCall) {
    this._call = call;
  }
}

export class CreateTicketCall extends ethereum.Call {
  get inputs(): CreateTicketCall__Inputs {
    return new CreateTicketCall__Inputs(this);
  }

  get outputs(): CreateTicketCall__Outputs {
    return new CreateTicketCall__Outputs(this);
  }
}

export class CreateTicketCall__Inputs {
  _call: CreateTicketCall;

  constructor(call: CreateTicketCall) {
    this._call = call;
  }

  get ticketSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get priceInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get eventName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get date(): string {
    return this._call.inputValues[3].value.toString();
  }

  get venueName(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateTicketCall__Outputs {
  _call: CreateTicketCall;

  constructor(call: CreateTicketCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetSalesPriceCall extends ethereum.Call {
  get inputs(): SetSalesPriceCall__Inputs {
    return new SetSalesPriceCall__Inputs(this);
  }

  get outputs(): SetSalesPriceCall__Outputs {
    return new SetSalesPriceCall__Outputs(this);
  }
}

export class SetSalesPriceCall__Inputs {
  _call: SetSalesPriceCall;

  constructor(call: SetSalesPriceCall) {
    this._call = call;
  }

  get ticketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetSalesPriceCall__Outputs {
  _call: SetSalesPriceCall;

  constructor(call: SetSalesPriceCall) {
    this._call = call;
  }
}
